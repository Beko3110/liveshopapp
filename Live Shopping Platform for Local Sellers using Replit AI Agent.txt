Here’s a detailed prompt to generate the Live Shopping Platform for Local Sellers using Replit AI Agent. The prompt includes setup instructions for the frontend, backend, database, and integrations with AWS services. Replit can manage both the frontend (React.js) and backend (Node.js with Express) using a full-stack environment.
________________


Prompt to Replit AI Agent:
Project Name: Live Shopping Platform for Local Sellers
________________


Frontend Requirements:
1. Framework:
   * Use React.js as the frontend framework. Ensure the app is mobile-first and responsive across all device sizes (mobile, tablet, desktop).
2. Live Streaming Integration:
   * Embed a live streaming player using Jitsi Meet or AWS Elemental MediaLive.
   * The player should display real-time streams where sellers can present their products.
3. Real-time Chat:
   * Implement a real-time chat feature using AWS AppSync (GraphQL) or WebSockets.
   * Ensure that users (buyers) can interact with sellers during live streams.
   * Add features for sellers to send notifications and users to react with emojis.
4. Product Listings & Showcase:
   * Create a product showcase section that lists products being sold by the seller during the live stream.
   * Products should display name, price, description, images, and a buy now button linked to the backend.
5. User Authentication:
   * Integrate AWS Cognito for user registration, login, and authentication.
   * Enable social sign-in options (Google, Facebook).
6. Gamification Features:
   * Implement rewards and engagement-based incentives for buyers. Display loyalty points and badges for users who engage during streams.
7. Responsive Design:
   * Ensure a fully responsive design using CSS3 and Flexbox/Grid.
   * For AR Shopping, provide basic support for 3D models using Three.js or another Web-based AR library.
8. Mobile & Multi-Platform Streaming:
   * Ensure sellers can stream across multiple platforms (Facebook, YouTube) by integrating the corresponding APIs (YouTube Data API, Facebook Live API).
________________


Backend Requirements:
1. Backend Framework:
   * Use Node.js with Express to handle the backend.
   * Configure the server to provide APIs for product management, chat, live stream handling, and gamification.
2. API Design:
   * Design REST APIs for the following:
      * Live Stream Management: Start/stop streams using AWS Elemental MediaLive.
      * Real-time Chat APIs: Manage chat messaging using AWS AppSync (GraphQL).
      * Product Management: CRUD operations for product listings (create, read, update, delete).
      * Order Processing APIs: Integrate payment processing APIs (Stripe or PayPal).
      * Rewards/Gamification: Track user engagement and issue loyalty points.
3. User Authentication:
   * Use AWS Cognito for secure user authentication and user management.
   * Support multi-factor authentication (MFA).
4. Real-time Features:
   * Implement real-time functionality for chat, inventory updates, and price changes using AWS AppSync or WebSockets.
   * Implement a feature to allow buyers to form groups and invite friends for group discounts.
5. AI-Powered Personalization:
   * Use AWS SageMaker to build personalized product recommendations for each buyer based on their past interactions and preferences.
   * Integrate an AI chatbot to guide buyers, powered by Amazon Lex.
6. Voice Assistant Integration:
   * Integrate Amazon Alexa Voice Service (AVS) for voice-based shopping assistance.
7. Payment Integration:
   * Connect to Stripe or PayPal for seamless payment processing.
________________


Database Setup:
1. Amazon RDS (PostgreSQL):
   * Use RDS for storing structured data like user profiles, orders, transactions, and product listings.
   * Enable daily backups and multi-AZ (availability zone) setup for high availability.
2. Amazon DynamoDB:
   * Use DynamoDB for fast, scalable access to:
      * Product inventory: Track real-time stock levels.
      * Live chat data: Store and fetch real-time messages.
      * Session data: Track user session information during live streams.
3. Amazon ElastiCache (Redis):
   * Implement ElastiCache (Redis) to cache frequently accessed product and session data to improve performance.
4. Data Structure:
* Users Table (RDS):
   * user_id: Primary Key
   * name, email, password_hash, signup_date, etc.
* Products Table (RDS):
   * product_id: Primary Key
   * seller_id: Foreign Key (links to seller)
   * price, description, stock_quantity, category
* Orders Table (RDS):
   * order_id: Primary Key
   * user_id: Foreign Key (linked to user)
   * order_total, payment_status, order_date, etc.
* Inventory Table (DynamoDB):
   * product_id: Partition Key
   * stock_quantity: Real-time stock updates.
* Chat Messages Table (DynamoDB):
   * message_id: Partition Key
   * timestamp: Sort Key
   * user_id, message_text
________________


AWS Services to Use:
1. AWS Amplify:
   * To host the React.js frontend and manage CI/CD pipelines for automatic deployment on code updates.
2. AWS Lambda:
   * Deploy backend functions (live stream management, real-time chat, etc.) using serverless Lambda functions for scalability.
3. AWS API Gateway:
   * Expose APIs to the frontend (REST and GraphQL) using API Gateway.
4. AWS Elemental MediaLive:
   * To manage live video streaming functionality for sellers.
5. AWS AppSync:
   * Use AppSync to provide real-time GraphQL endpoints for live chat, inventory updates, and product listing changes.
6. AWS Cognito:
   * Handle user authentication (including MFA) using AWS Cognito.
7. Amazon S3:
   * Store static assets (product images, videos, etc.) on S3 and serve them via CloudFront.
8. AWS SageMaker:
   * To build and deploy machine learning models for personalized product recommendations.
9. Amazon Lex:
   * Use Lex for implementing a conversational AI chatbot to assist buyers.
10. Amazon RDS:
   * Use RDS (PostgreSQL) for transactional data like user profiles, orders, and product details.
11. Amazon DynamoDB:
   * Use DynamoDB for real-time data like inventory and chat logs.
12. Amazon ElastiCache:
   * Implement Redis for caching frequently accessed data to reduce latency and database load.
13. Amazon CloudWatch:
   * Set up CloudWatch for logging and monitoring Lambda functions, API Gateway, and other AWS services.
________________


Additional Features:
* AR Shopping: Integrate Three.js for AR-based product visualizations.
* Group Discounts: Implement a system where users can invite friends for dynamic group discounts.
* Multi-Seller Streams: Allow multiple sellers to join a single stream, managed via AWS Elemental MediaLive.
* Multi-language Support: Enable hyper-localization with multi-language support using i18n and currency converters.
________________


Deployment & Testing:
1. Frontend (React.js):
   * Deploy the frontend on AWS Amplify.
2. Backend (Node.js/Express):
   * Deploy the backend using AWS Lambda and expose APIs via API Gateway.
3. CI/CD:
   * Set up CI/CD pipelines using AWS Amplify for automatic frontend and backend deployments.
4. Testing:
   * Use Jest for unit testing in both the frontend and backend.
   * Set up integration tests using Postman or Newman for API testing.
________________


This prompt will guide the Replit AI Agent to build the full Live Shopping Platform app with a robust architecture using AWS services for scalability, real-time communication, and high performance.